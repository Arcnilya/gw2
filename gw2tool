#!/usr/bin/python3.6
import sys, os, json, argparse, urllib, requests
from urllib.error import HTTPError, URLError
from socket import timeout

URL = "https://api.guildwars2.com/v2/"
API_KEY = "?access_token="
TAB_SIZE = 30
FRACTAL_TABLE = None

# Methods for reading API key
def load_api_key():
	try:
		with open("api_key", 'r') as key_file:
			global API_KEY
			API_KEY = API_KEY + key_file.readline().rstrip()
	except OSError:
		exit("could not read api_key")

# Method for reading fractal information (no official API)
# fractal_table.json may be subject to change with new fractals!
def load_fractals():
	try:
		with open("fractal_table.json", 'r') as table:
			global FRACTAL_TABLE
			FRACTAL_TABLE = json.load(table)
	except OSError:
		exit("could not read fractal_table.json")

# Method for fetching json via url (gw2API)
def url2json(target_url):
	try:
		response = requests.get(URL + target_url, timeout=10).text
	except HTTPError as error:
		logging.error('Data of %s not retrieved because %s\nURL: %s', name, error, url)
	except URLError as error:
		if isinstance(error.reason, timeout):
			logging.error('socket timed out - URL %s', url)
		else:
			logging.error('some other error happened')
	else:
		return json.loads(response)

# Method for extracting values from json items
def extract_values(items, value):
	values = []
	for item in items:
		if item is not None:
			values.append(str(item[value]))
	return values

# Method for abstraction
def get_characters():
	return url2json("characters" + API_KEY)


# Method for restoring duplicates after API request
def restore_duplicates(original_list, new_list):
	fixed = []
	if len(original_list) == len(new_list): # No duplicates
		return new_list
	else:
		for x in range(len(original_list)):
			for y in range(x+1, len(original_list)):
				if original_list[x] == original_list[y]:	# found duplicate
					if not original_list[x] in fixed:				# if not fixed
						new_list.insert(y, new_list[x])				# restore duplicate
			fixed.append(original_list[x])							# add to fixed
	return new_list

# Method for fetching items via ids
def get_list(list_type, items):
	json_item = url2json(list_type + "?ids=" + ",".join(items))
	return restore_duplicates(items, json_item)

# Method for a nice printout of items
def print_item(item):
	# Todo: consumables do not have rarities
	print("{} \nLink: {} Rarity: {}\n".format(item['name'], item['chat_link'], item['rarity']))

# Method for finding substring in character list
def find_character(substring):
	char_list = get_characters()
	character = ""
	chars_found = 0
	for char in char_list:
		if substring.lower() in str(char).lower():
			character = str(char)
			chars_found += 1
	if chars_found == 0:
		exit("character not found")
	if chars_found > 1:
		exit("found {} characters".format(chars_found))

	print("found character: {}".format(character))
	return character
	
# Method for displaying inventory of character
def inventory(args):
	if len(args) < 1:
		exit("Usage: gw2tool inventory <character>")

	character = find_character(args[0])

	# urllib.parse.quote to handle spaces in character names (firstname lastname) and weird letters?
	inventory = url2json("characters/" + urllib.parse.quote(character) + "/inventory" + API_KEY)
	
	item_ids = []
	item_amounts = []

	for bag in inventory['bags']:
		for item in bag['inventory']:
			if item is not None:
				item_ids.append(str(item['id']))
				item_amounts.append(str(item['count']))
	inventory_items = get_list("items", item_ids) 
	
	index = 0
	for item in inventory_items:
		print("{}x {}".format(item_amounts[index], item['name']))
		index += 1

# Method for displaying equipment on character
def equipment(args):
	print("equipment")
	if len(args) < 1:
		exit("Usage: gw2tool equipment <character>")

	character = find_character(args[0])
	char_equipment = url2json("characters/" + urllib.parse.quote(character) + "/equipment" + API_KEY)
	item_slots = extract_values(char_equipment['equipment'], 'slot')
	equipment_items = get_list("items", extract_values(char_equipment['equipment'], 'id'))

	index = 0
	for item in equipment_items:
		print("{}: ".format(item_slots[index]), end='')
		print_item(item)
		index += 1

# Method for printing a specific bank tab
def print_tab(bank_items, tab_index):
	item_ids = []
	item_amounts = []
	# print intervals: 0-29, 30-59, 60-89, etc
	for i in range(tab_index*TAB_SIZE, (tab_index*TAB_SIZE)+TAB_SIZE):
		if bank_items[i] is not None:
			item_ids.append(str(bank_items[i]['id']))
			item_amounts.append(bank_items[i]['count'])
	tab_items = get_list("items", item_ids)
	index = 0
	for item in tab_items:
		print("{}x {}".format(item_amounts[index], item['name'])) 
		index += 1

# Method for printing items in bank, all or subset of all banktabs
def bank(args):
	tab_list = []
	if len(args) > 0:
		tab_list = [int(s) for s in args if s.isdigit()]
		if not tab_list:
			print("Usage: gw2tool bank (<bank_tab>)")
	
	bank_items = url2json("account/bank" + API_KEY)
	tab_num = int(len(bank_items) / TAB_SIZE)

	if not tab_list:
		for i in range(0, tab_num):
			print_tab(bank_items, i)
			print("")
	else:
		for index in tab_list:
			print_tab(bank_items, index)
			print("")

def account(args):
	print("account TODO")

# Method for listing stuff, characters implemented
def list_things(args):
	if len(args) < 1:
		exit("Usage: gw2tool list <parameter(s)>")
	
	if str(args[0]) == "characters":
		print(*get_characters(), sep='\n')

# Method for fetching the name of a fractal via level
def get_fractal_name(level):
	key = 'T' + str(1 + int(level/26))
	for fractal in FRACTAL_TABLE[key]:
		if fractal['level'] == level:
			return "{} {} (level {})".format(key, fractal['name'], level)
	return str(level)

# Method for showing daily achievements, crafting, etc.
def daily(args):

	if len(args) < 1:
		exit("Usage: gw2tool daily <parameter(s)> (tomorrow)")

	if str(args[0]) == "crafting":
		all_daily_items = url2json("dailycrafting")
		crafted_daily_items = url2json("account/dailycrafting" + API_KEY)
		#print(all_daily_items)
		#print(crafted_daily_items)
		for item in all_daily_items:
			name = item.replace("_", " ").title()
			if item in crafted_daily_items:
				print("{} (done)".format(name))
			else:
				print("{}".format(name))


	# Tomorrow feature for achievements (not crafting, which is above) 
	if len(args) == 2:
		if str(args[1]) == "tomorrow":
			daily_achievements = url2json("achievements/daily/tomorrow")
		else:
			exit("Usage: gw2tool daily <parameter(s)> (tomorrow)")
	else:
		daily_achievements = url2json("achievements/daily")
	
	if str(args[0]) == "fractals":
		daily_fractals = daily_achievements['fractals']
		achievement_items = get_list("achievements", extract_values(daily_fractals, 'id'))
		
		load_fractals()
		get_fractal_name(66)

		names = []
		for achievement in achievement_items:
			name = achievement['name']
			if "Tier 4" in name:
				names.append("Daily" + name.split('4')[-1])
			if "Rec" in achievement['name']:
				names.append("Rec " + get_fractal_name(int(name.split()[-1])))
		for name in names:
			print(name)

def main():
	
	commands = {
		'inventory': inventory,
		'equipment': equipment,
		'bank': bank,
		'account': account,
		'list': list_things,
		'daily': daily,
		}
	
	if len(sys.argv) < 2:
		exit("Usage: gw2tool <command> <parameter(s)>")

	if not sys.argv[1] in commands.keys():
		exit("Command not found")

	load_api_key()
	commands[sys.argv[1]](sys.argv[2:])

if __name__ == "__main__":
		main()
